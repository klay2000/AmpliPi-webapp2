#!/usr/bin/python3
# https://gist.github.com/Pindar/e259bec5c3ab862f4ff5f1fbcb11bfc1

""" Handles pairing and authorization of Bluetooth devices. The following agent
allows the Raspberry Pi to automatically pair and accept A2DP, HFP, HSP and
AVRCP connections from Bluetooth devices. """

import dbus
import dbus.mainloop.glib
import dbus.service

try:
  from gi.repository import GObject
except ImportError:
  import gobject as GObject

AGENT_INTERFACE = "org.bluez.Agent1"
AGENT_PATH = "/test/agent"

class Rejected(dbus.DBusException):
  _dbus_error_name = "org.bluez.Error.Rejected"

class Agent(dbus.service.Object):
  exit_on_release = True

  def set_exit_on_release(self, exit_on_release):
    self.exit_on_release = exit_on_release

  @dbus.service.method(AGENT_INTERFACE, in_signature="", out_signature="")
  def Release(self):
    print("Release")
    if self.exit_on_release:
      mainloop.quit()

  @dbus.service.method(AGENT_INTERFACE, in_signature="os", out_signature="")
  def AuthorizeService(self, device, uuid):
    print(f"AuthorizeService ({device}, {uuid})")
    if uuid.lower() == "0000110d-0000-1000-8000-00805f9b34fb":
      print("Authorized A2DP Service")
      return
    if uuid.lower() == "0000111e-0000-1000-8000-00805f9b34fb":
      print("Authorized HFP Service")
      return
    if uuid.lower() == "00001108-0000-1000-8000-00805f9b34fb":
      print("Authorized HSP Service")
      return
    if uuid.lower() == "0000110e-0000-1000-8000-00805f9b34fb":
      print("Authorized AVRCP Service")
      return
    print("Rejecting non-A2DP Service, %s", uuid.lower())
    raise Rejected("Connection rejected")

  @dbus.service.method(AGENT_INTERFACE, in_signature="o", out_signature="s")
  def RequestPinCode(self, device):
    print(f"RequestPinCode ({device})")
    return "0000"

  @dbus.service.method(AGENT_INTERFACE, in_signature="o", out_signature="u")
  def RequestPasskey(self, device):
    print(f"RequestPassKey ({device})")
    return dbus.UInt32("password")

  @dbus.service.method(AGENT_INTERFACE, in_signature="ouq", out_signature="")
  def DisplayPasskey(self, device, passkey, entered):
    print(f"DisplayPassKey ({device}, {passkey} entered {entered})")

  @dbus.service.method(AGENT_INTERFACE, in_signature="os", out_signature="")
  def DisplayPinCode(self, device, pincode):
    print(f"DisplayPinCode ({device}, {pincode})")

  @dbus.service.method(AGENT_INTERFACE, in_signature="ou", out_signature="")
  def RequestConfirmation(self, device, passkey):
    print(f"RequestConfirmation ({device}, {passkey})")

  @dbus.service.method(AGENT_INTERFACE, in_signature="o", out_signature="")
  def RequestAuthorization(self, device):
    print(f"RequestAuthorization ({device})")
    raise Rejected("Pairing rejected")

  @dbus.service.method(AGENT_INTERFACE, in_signature="", out_signature="")
  def Cancel(self):
    print("Cancel")


if __name__ == '__main__':
  dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

  bus = dbus.SystemBus()

  agent = Agent(bus, AGENT_PATH)

  obj = bus.get_object("org.bluez", "/org/bluez")
  manager = dbus.Interface(obj, "org.bluez.AgentManager1")
  manager.RegisterAgent(AGENT_PATH, "NoInputNoOutput")

  print("A2DP Agent Registered")

  manager.RequestDefaultAgent(AGENT_PATH)

  mainloop = GObject.MainLoop()
  mainloop.run()
